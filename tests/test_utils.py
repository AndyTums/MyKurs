from unittest.mock import patch
from freezegun import freeze_time
import pytest

from src.utils import hello, cards_filter, top_transaction, currency_rates, cost_promotion


@freeze_time("2023-01-01 10:00:00")
def test_hello_1():
    assert hello() == "Доброе утро"


@freeze_time("2023-01-01 15:00:00")
def test_hello_2():
    assert hello() == "Добрый день"


@freeze_time("2023-01-01 19:00:00")
def test_hello_3():
    assert hello() == "Добрый вечер"


@freeze_time("2023-01-01 23:00:00")
def test_hello_4():
    assert hello() == "Доброй ночи"


@pytest.mark.parametrize("test, result",
                         [
                             ([{'Дата операции': '31.12.2021 16:44:00', 'Дата платежа': '31.12.2021',
                                'Номер карты': '*7197', 'Статус': 'OK',
                                'Сумма операции': -160.89, 'Валюта операции': 'RUB', 'Сумма платежа': -160.89,
                                'Валюта платежа': 'RUB',
                                'Кэшбэк': 'Отсутствует', 'Категория': 'Супермаркеты', 'MCC': 5411.0,
                                'Описание': 'Колхоз',
                                'Бонусы (включая кэшбэк)': 3, 'Округление на инвесткопилку': 0,
                                'Сумма операции с округлением': 160.89}],
                              [{'Номер карты': '*7197', 'Сумма': 160.89, 'Кэшбэк': 1.61}]),

                             (([{'Дата операции': '31.12.2021 16:42:04', 'Дата платежа': '31.12.2021',
                                 'Номер карты': '*7197', 'Статус': 'OK',
                                 'Сумма операции': -64.0, 'Валюта операции': 'RUB', 'Сумма платежа': -64.0,
                                 'Валюта платежа': 'RUB',
                                 'Кэшбэк': 'Отсутствует', 'Категория': 'Супермаркеты', 'MCC': 5411.0,
                                 'Описание': 'Колхоз',
                                 'Бонусы (включая кэшбэк)': 1, 'Округление на инвесткопилку': 0,
                                 'Сумма операции с округлением': 64.0}],
                               [{'Номер карты': '*7197', 'Сумма': 64.0, 'Кэшбэк': 0.64}]))])
def test_cards_filter(test, result):
    assert cards_filter(test) == result

    assert cards_filter("") == []


@pytest.mark.parametrize("test, result",
                         [
                             ([[{'Дата операции': '31.12.2021 16:44:00', 'Дата платежа': '31.12.2021',
                                 'Номер карты': '*7197', 'Статус': 'OK', 'Сумма операции': -160.89,
                                 'Валюта операции': 'RUB', 'Сумма платежа': -160.89, 'Валюта платежа': 'RUB',
                                 'Кэшбэк': 'Отсутствует', 'Категория': 'Супермаркеты', 'MCC': 5411.0,
                                 'Описание': 'Колхоз', 'Бонусы (включая кэшбэк)': 3, 'Округление на инвесткопилку': 0,
                                 'Сумма операции с округлением': 160.89},
                                {'Дата операции': '31.12.2021 16:42:04', 'Дата платежа': '31.12.2021',
                                 'Номер карты': '*7197', 'Статус': 'OK', 'Сумма операции': -64.0,
                                 'Валюта операции': 'RUB', 'Сумма платежа': -64.0, 'Валюта платежа': 'RUB',
                                 'Кэшбэк': 'Отсутствует', 'Категория': 'Супермаркеты', 'MCC': 5411.0,
                                 'Описание': 'Колхоз', 'Бонусы (включая кэшбэк)': 1, 'Округление на инвесткопилку': 0,
                                 'Сумма операции с округлением': 64.0},
                                {'Дата операции': '31.12.2021 16:39:04', 'Дата платежа': '31.12.2021',
                                 'Номер карты': '*7197', 'Статус': 'OK', 'Сумма операции': -118.12,
                                 'Валюта операции': 'RUB', 'Сумма платежа': -118.12, 'Валюта платежа': 'RUB',
                                 'Кэшбэк': 'Отсутствует', 'Категория': 'Супермаркеты', 'MCC': 5411.0,
                                 'Описание': 'Магнит', 'Бонусы (включая кэшбэк)': 2, 'Округление на инвесткопилку': 0,
                                 'Сумма операции с округлением': 118.12},
                                {'Дата операции': '31.12.2021 15:44:39', 'Дата платежа': '31.12.2021',
                                 'Номер карты': '*7197', 'Статус': 'OK', 'Сумма операции': -78.05,
                                 'Валюта операции': 'RUB', 'Сумма платежа': -78.05, 'Валюта платежа': 'RUB',
                                 'Кэшбэк': 'Отсутствует', 'Категория': 'Супермаркеты', 'MCC': 5411.0,
                                 'Описание': 'Колхоз', 'Бонусы (включая кэшбэк)': 1, 'Округление на инвесткопилку': 0,
                                 'Сумма операции с округлением': 78.05},
                                {'Дата операции': '31.12.2021 01:23:42', 'Дата платежа': '31.12.2021',
                                 'Номер карты': '*5091', 'Статус': 'OK', 'Сумма операции': -564.0,
                                 'Валюта операции': 'RUB', 'Сумма платежа': -564.0, 'Валюта платежа': 'RUB',
                                 'Кэшбэк': 'Отсутствует', 'Категория': 'Различные товары', 'MCC': 5399.0,
                                 'Описание': 'Ozon.ru', 'Бонусы (включая кэшбэк)': 5, 'Округление на инвесткопилку': 0,
                                 'Сумма операции с округлением': 564.0},
                                {'Дата операции': '31.12.2021 00:12:53', 'Дата платежа': '31.12.2021',
                                 'Номер карты': 'Отсутствует', 'Статус': 'OK', 'Сумма операции': -800.0,
                                 'Валюта операции': 'RUB', 'Сумма платежа': -800.0, 'Валюта платежа': 'RUB',
                                 'Кэшбэк': 'Отсутствует', 'Категория': 'Переводы', 'MCC': 'Отсутствует',
                                 'Описание': 'Константин Л.', 'Бонусы (включая кэшбэк)': 0,
                                 'Округление на инвесткопилку': 0, 'Сумма операции с округлением': 800.0}],
                               [{'Дата операции': '31.12.2021', 'Сумма': 564.0, 'Категория': 'Различные товары',
                                 'Описание': 'Ozon.ru'},
                                {'Дата операции': '31.12.2021', 'Сумма': 160.89, 'Категория': 'Супермаркеты',
                                 'Описание': 'Колхоз'},
                                {'Дата операции': '31.12.2021', 'Сумма': 118.12, 'Категория': 'Супермаркеты',
                                 'Описание': 'Магнит'},
                                {'Дата операции': '31.12.2021', 'Сумма': 78.05, 'Категория': 'Супермаркеты',
                                 'Описание': 'Колхоз'},
                                {'Дата операции': '31.12.2021', 'Сумма': 64.0, 'Категория': 'Супермаркеты',
                                 'Описание': 'Колхоз'}]

                               ])])
def test_top_transaction(test, result):
    assert top_transaction(test) == result


@patch("requests.get")
def test_check_currency(mock_get):
    mock_get.return_value.status.code.return_value = 200
    mock_get.return_value.json.return_value = {"base": "EUR", "date": "2024-07-18", "rates": {"RUB": 96.62},
                                               "success": True, "timestamp": 1721291536}
    assert currency_rates() == [{'Валюта': 'USD', 'Цена': 96.62}, {'Валюта': 'EUR', 'Цена': 96.62}]


@patch("requests.get")
def test_cost_promotion(mock_get):
    mock_get.return_value.status.code.return_value = 200
    mock_get.return_value.json.return_value = [{'symbol': 'GOOGL', 'name': 'AfterNext HealthTech Acquisition Corp.',
                                                'price': 177.66, 'exchange': 'New York Stock Exchange',
                                                'exchangeShortName': 'NYSE', 'type': 'stock'},
                                               {'symbol': 'MSFT', 'name': 'AfterNext HealthTech Acquisition Corp.',
                                                'price': 437.11, 'exchange': 'New York Stock Exchange',
                                                'exchangeShortName': 'NYSE', 'type': 'stock'},
                                               {'symbol': 'AAPL', 'name': 'AfterNext HealthTech Acquisition Corp.',
                                                'price': 224.31, 'exchange': 'New York Stock Exchange',
                                                'exchangeShortName': 'NYSE', 'type': 'stock'},
                                               {'symbol': 'TSLA', 'name': 'AfterNext HealthTech Acquisition Corp.',
                                                'price': 239.2, 'exchange': 'New York Stock Exchange',
                                                'exchangeShortName': 'NYSE', 'type': 'stock'},
                                               {'symbol': 'AMZN', 'name': 'AfterNext HealthTech Acquisition Corp.',
                                                'price': 183.13, 'exchange': 'New York Stock Exchange',
                                                'exchangeShortName': 'NYSE', 'type': 'stock'}]
    assert cost_promotion() == [{'Акция': 'GOOGL', 'Цена': 177.66}, {'Акция': 'MSFT', 'Цена': 437.11},
                                {'Акция': 'AAPL', 'Цена': 224.31},
                                {'Акция': 'TSLA', 'Цена': 239.2}, {'Акция': 'AMZN', 'Цена': 183.13}]
